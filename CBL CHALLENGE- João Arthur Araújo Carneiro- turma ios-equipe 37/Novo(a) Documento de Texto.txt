import Foundation
import CryptoKit


struct PasswordEntry: Codable {
    var service: String
    var encryptedPassword: String
}


func encryptPassword(_ password: String, key: SymmetricKey) -> String {
    let data = Data(password.utf8)
    let sealedBox = try! AES.GCM.seal(data, using: key)
    return sealedBox.combined!.base64EncodedString()
}


func decryptPassword(_ encryptedPassword: String, key: SymmetricKey) -> String {
    let data = Data(base64Encoded: encryptedPassword)!
    let sealedBox = try! AES.GCM.SealedBox(combined: data)
    let decryptedData = try! AES.GCM.open(sealedBox, using: key)
    return String(data: decryptedData, encoding: .utf8)!
}


func loadPasswords(from file: String, key: SymmetricKey) -> [PasswordEntry]? {
    if let data = try? Data(contentsOf: URL(fileURLWithPath: file)) {
        let decoder = JSONDecoder()
        let entries = try? decoder.decode([PasswordEntry].self, from: data)
        return entries?.map { entry in
            var decryptedEntry = entry
            decryptedEntry.encryptedPassword = decryptPassword(entry.encryptedPassword, key: key)
            return decryptedEntry
        }
    }
    return nil
}


func savePasswords(_ passwords: [PasswordEntry], to file: String, key: SymmetricKey) {
    let encoder = JSONEncoder()
    let entries = passwords.map { entry in
        var encryptedEntry = entry
        encryptedEntry.encryptedPassword = encryptPassword(entry.encryptedPassword, key: key)
        return encryptedEntry
    }
    if let data = try? encoder.encode(entries) {
        try? data.write(to: URL(fileURLWithPath: file))
    }
}


func searchPassword(service: String, passwords: [PasswordEntry]) -> String? {
    if let entry = passwords.first(where: { $0.service.lowercased() == service.lowercased() }) {
        return entry.encryptedPassword
    }
    return nil
}


func addPassword(service: String, password: String, passwords: [PasswordEntry], key: SymmetricKey) -> [PasswordEntry] {
    let newEntry = PasswordEntry(service: service, encryptedPassword: password)
    var newPasswords = passwords
    newPasswords.append(newEntry)
    return newPasswords
}


func deletePassword(service: String, passwords: [PasswordEntry]) -> [PasswordEntry]? {
    var newPasswords = passwords
    if let index = newPasswords.firstIndex(where: { $0.service.lowercased() == service.lowercased() }) {
        newPasswords.remove(at: index)
        return newPasswords
    }
    return nil
}


func displayMenu() {
    print("Gerenciador de Senhas - CLI")
    print("1. Adicionar senha")
    print("2. Listar senhas")
    print("3. Buscar senha")
    print("4. Excluir senha")
    print("5. Sair")
    print("Escolha uma opção:")
}

func main() {
    let filePath = "passwords.json"
    let key = SymmetricKey(size: .bits256)

    var passwords = loadPasswords(from: filePath, key: key) ?? []

    while true {
        displayMenu()
        
        guard let input = readLine() else { continue }
        switch input {
        case "1":
            // Adicionar senha
            print("Informe o serviço:")
            guard let service = readLine() else { continue }
            print("Informe a senha:")
            guard let password = readLine() else { continue }
            passwords = addPassword(service: service, password: password, passwords: passwords, key: key)
            savePasswords(passwords, to: filePath, key: key)
            print("Senha adicionada com sucesso.")
            
        case "2":
            // Listar senhas
            print("Senhas armazenadas:")
            for entry in passwords {
                print("Serviço: \(entry.service), Senha: \(entry.encryptedPassword)")
            }
            
        case "3":
            // Buscar senha
            print("Informe o serviço para buscar a senha:")
            guard let service = readLine() else { continue }
            if let password = searchPassword(service: service, passwords: passwords) {
                print("Senha para \(service): \(password)")
            } else {
                print("Serviço não encontrado.")
            }
            
        case "4":
            // Excluir senha
            print("Informe o serviço para excluir a senha:")
            guard let service = readLine() else { continue }
            if let updatedPasswords = deletePassword(service: service, passwords: passwords) {
                passwords = updatedPasswords
                savePasswords(passwords, to: filePath, key: key)
                print("Senha excluída com sucesso.")
            } else {
                print("Serviço não encontrado.")
            }
            
        case "5":
            // Sair
            print("Saindo do Gerenciador de Senhas.")
            return
            
        default:
            print("Opção inválida.")
        }
    }
}

